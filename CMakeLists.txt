cmake_minimum_required(VERSION 3.4...3.18)
project(base_compnal)

enable_language(CXX)
set(CMAKE_MACOSX_RPATH TRUE)
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wno-unused-command-line-argument -llapack")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}  -Wno-unused-command-line-argument -llapack")
set(CMAKE_CXX_STANDARD 17)
set(CXX_STANDARD_REQUIRED TRUE)
set(CMAKE_VERBOSE_MAKEFILE TRUE)
set(DEFAULT_USE_OMP Yes)

# Use OpenMP as default behavior
message(STATUS "FORCE_USE_OMP = ${FORCE_USE_OMP}")

if(NOT APPLE) 
  if(NOT DEFINED USE_OMP) 
    set(USE_OMP ${DEFAULT_USE_OMP})
  endif() 
else() 
  if(FORCE_USE_OMP) 
    set(USE_OMP ${DEFAULT_USE_OMP})
    message(STATUS "APPLE_FORCE_USE_OMP = ${FORCE_USE_OMP}")
  endif()
endif()

if(USE_OMP)
    set(CMAKE_INSTALL_OPENMP_LIBRARIES ON)
    if(APPLE) 
      if(NOT CMAKE_OSX_ARCHITECTURES)
        message(STATUS "Apple Native Build")
	set(OpenMP_C_FLAGS "-Xpreprocessor -fopenmp")
	set(OpenMP_CXX_FLAGS "-Xpreprocessor -fopenmp")
        find_package(OpenMP REQUIRED)
	if(OpenMP_FOUND)
           message(STATUS "OMP_FOUND = YES")
           add_definitions(-DUSE_OMP)
	endif()
      elseif(${CMAKE_OSX_ARCHITECTURES} STREQUAL "arm64")
        message(STATUS "APPLE SILICON")
	set(OpenMP_C_FLAGS "-Xpreprocessor -fopenmp")
	set(OpenMP_CXX_FLAGS "-Xpreprocessor -fopenmp")
        find_package(OpenMP REQUIRED)
	if(OpenMP_FOUND)
           message(STATUS "OMP_FOUND = YES")
           add_definitions(-DUSE_OMP)
        else() 
          message(STATUS "OMP_FOUND = NO") 
	endif()
      else()
        message(STATUS "APPLE X86-64")
        find_package(OpenMP REQUIRED)
	if(OpenMP_FOUND)
           message(STATUS "OMP_FOUND = YES")
           add_definitions(-DUSE_OMP)
	endif()
      endif()
    else()
      find_package(OpenMP REQUIRED)
      if(OpenMP_FOUND)
        message(STATUS "OMP_FOUND = YES")
        add_definitions(-DUSE_OMP)
      endif()
    endif()
else() 
  if(APPLE) 
      if(NOT CMAKE_OSX_ARCHITECTURES)
        message(STATUS "APPLE Native Build")
	set(OpenMP_C_FLAGS "-Xpreprocessor -fopenmp")
	set(OpenMP_CXX_FLAGS "-Xpreprocessor -fopenmp")
        find_package(OpenMP)
	if(OpenMP_FOUND)
           set(USE_OMP ${DEFAULT_USE_OMP})
           message(STATUS "OMP_FOUND = YES")
           add_definitions(-DUSE_OMP)
	else() 
          message(STATUS "OMP_FOUND = NO") 
	endif()
      elseif(${CMAKE_OSX_ARCHITECTURES} STREQUAL "arm64")
        message(STATUS "APPLE SILICON")
	set(OpenMP_C_FLAGS "-Xpreprocessor -fopenmp")
	set(OpenMP_CXX_FLAGS "-Xpreprocessor -fopenmp")
        find_package(OpenMP)
	if(OpenMP_FOUND)
           set(USE_OMP ${DEFAULT_USE_OMP})
           message(STATUS "OMP_FOUND = YES")
           add_definitions(-DUSE_OMP)
        else() 
          message(STATUS "OMP_FOUND = NO") 
	endif()
      else()
        message(STATUS "APPLE X86-64")
        find_package(OpenMP)
	if(OpenMP_FOUND)
           set(USE_OMP ${DEFAULT_USE_OMP})
           message(STATUS "OMP_FOUND = YES")
           add_definitions(-DUSE_OMP)
	else() 
          message(STATUS "OMP_FOUND = NO") 
	endif()
      endif()
  endif()
endif()

if (APPLE)
    find_package(BLAS)
    find_package(LAPACK)
endif()

message(STATUS "USE_OMP = ${USE_OMP}")

add_definitions("-llapack")

add_subdirectory(pybind11)
pybind11_add_module(base_compnal wrapper/pybind11_main.cpp)

# EXAMPLE_VERSION_INFO is defined by setup.py and passed into the C++ code as a
# define (VERSION_INFO) here.
target_compile_definitions(base_compnal
                           PRIVATE VERSION_INFO=${EXAMPLE_VERSION_INFO})
